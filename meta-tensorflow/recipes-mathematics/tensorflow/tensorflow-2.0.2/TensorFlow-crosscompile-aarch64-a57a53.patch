From bbda4591a1b7986e1cc96e533defdf56c8ac28a4 Mon Sep 17 00:00:00 2001
From: Jianming Qiao <jianming.qiao@bp.renesas.com>
Date: Wed, 4 Dec 2019 23:35:34 +0000
Subject: [PATCH] Add 64bit arm cross-compiler support

Signed-off-by: Jianming Qiao <jianming.qiao@bp.renesas.com>
---
 third_party/toolchains/yocto/BUILD         |  52 +++++++
 third_party/toolchains/yocto/CROSSTOOL.tpl | 237 +++++++++++++++++++++++++++++
 2 files changed, 289 insertions(+)
 create mode 100644 third_party/toolchains/yocto/BUILD
 create mode 100644 third_party/toolchains/yocto/CROSSTOOL.tpl

diff --git a/third_party/toolchains/yocto/BUILD b/third_party/toolchains/yocto/BUILD
new file mode 100644
index 0000000..583650b
--- /dev/null
+++ b/third_party/toolchains/yocto/BUILD
@@ -0,0 +1,52 @@
+package(default_visibility = ["//visibility:public"])
+
+cc_toolchain_suite(
+    name = "toolchain",
+    toolchains = {
+        "arm64-v8a|compiler|compiler": ":cc-compiler-arm64-v8a",
+        "local|compiler": ":cc-compiler-local",
+        "arm64-v8a": ":cc-compiler-arm64-v8a",
+        "k8": ":cc-compiler-local",
+        "piii": ":cc-compiler-local",
+        "arm": ":cc-compiler-local",
+        "s390x": ":cc-compiler-local",
+    },
+)
+
+filegroup(
+    name = "empty",
+    srcs = [],
+)
+
+filegroup(
+    name = "arm_linux_all_files",
+    srcs = [
+        "@yocto_compiler//:compiler_pieces",
+    ],
+)
+
+cc_toolchain(
+    name = "cc-compiler-local",
+    all_files = ":empty",
+    compiler_files = ":empty",
+    cpu = "local",
+    dwp_files = ":empty",
+    linker_files = ":empty",
+    objcopy_files = ":empty",
+    strip_files = ":empty",
+    supports_param_files = 1,
+    toolchain_identifier = "local_linux",
+)
+
+cc_toolchain(
+    name = "cc-compiler-arm64-v8a",
+    all_files = ":arm_linux_all_files",
+    compiler_files = ":arm_linux_all_files",
+    cpu = "arm64-v8a",
+    dwp_files = ":empty",
+    linker_files = ":arm_linux_all_files",
+    objcopy_files = "arm_linux_all_files",
+    strip_files = "arm_linux_all_files",
+    supports_param_files = 1,
+    toolchain_identifier = "yocto-toolchain",
+)
diff --git a/third_party/toolchains/yocto/CROSSTOOL.tpl b/third_party/toolchains/yocto/CROSSTOOL.tpl
new file mode 100644
index 0000000..b59b217
--- /dev/null
+++ b/third_party/toolchains/yocto/CROSSTOOL.tpl
@@ -0,0 +1,237 @@
+major_version: "local"
+minor_version: ""
+default_target_cpu: "same_as_host"
+
+toolchain {
+  abi_version: "arm64-v8a"
+  abi_libc_version: "arm64-v8a"
+  builtin_sysroot: ""
+  compiler: "compiler"
+  host_system_name: "arm64-v8a"
+  needsPic: true
+  supports_gold_linker: false
+  supports_incremental_linker: false
+  supports_fission: false
+  supports_interface_shared_objects: false
+  supports_normalizing_ar: false
+  supports_start_end_lib: false
+  target_libc: "arm64-v8a"
+  target_cpu: "arm64-v8a"
+  target_system_name: "arm64-v8a"
+  toolchain_identifier: "yocto-toolchain"
+
+  tool_path { name: "compat-ld" path: "/bin/false" }
+  tool_path { name: "ar" path:        "%%CT_ROOT_DIR%%/usr/bin/%%CT_NAME%%/%%CT_NAME%%-ar" }
+  tool_path { name: "cpp" path:       "%%CT_ROOT_DIR%%/usr/bin/%%CT_NAME%%/%%CT_NAME%%-cpp" }
+  tool_path { name: "dwp" path:       "%%CT_ROOT_DIR%%/usr/bin/%%CT_NAME%%/%%CT_NAME%%-dwp" }
+  tool_path { name: "gcc" path:       "%%CT_ROOT_DIR%%/usr/bin/%%CT_NAME%%/%%CT_NAME%%-gcc" }
+  tool_path { name: "gcov" path:      "%%CT_ROOT_DIR%%/usr/bin/%%CT_NAME%%/%%CT_NAME%%-gcov" }
+  tool_path { name: "ld" path:        "%%CT_ROOT_DIR%%/usr/bin/%%CT_NAME%%/%%CT_NAME%%-ld" }
+  tool_path { name: "nm" path:        "%%CT_ROOT_DIR%%/usr/bin/%%CT_NAME%%/%%CT_NAME%%-nm" }
+  tool_path { name: "objcopy" path:   "%%CT_ROOT_DIR%%/usr/bin/%%CT_NAME%%/%%CT_NAME%%-objcopy" }
+  tool_path { name: "objdump" path:   "%%CT_ROOT_DIR%%/usr/bin/%%CT_NAME%%/%%CT_NAME%%-objdump" }
+  tool_path { name: "strip" path:     "%%CT_ROOT_DIR%%/usr/bin/%%CT_NAME%%/%%CT_NAME%%-strip" }
+
+  cxx_builtin_include_directory: "%%CT_ROOT_DIR%%/%%CT_NAME%%/usr/lib/%%CT_NAME%%/gcc/%%CT_NAME%%/%%CT_GCC_VERSION%%/install-tools/include"
+  cxx_builtin_include_directory: "%%CT_ROOT_DIR%%/usr/lib/%%CT_NAME%%/gcc/%%CT_NAME%%/%%CT_GCC_VERSION%%/include"
+  cxx_builtin_include_directory: "%%CT_ROOT_DIR%%/usr/lib/%%CT_NAME%%/gcc/%%CT_NAME%%/%%CT_GCC_VERSION%%/plugin/include"
+  cxx_builtin_include_directory: "%%CT_ROOT_DIR%%/usr/include"
+  cxx_builtin_include_directory: "%%CT_ROOT_DIR%%/usr/include/gcc-build-internal-%%CT_NAME%%/gcc/include"
+  cxx_builtin_include_directory: "%%CT_ROOT_DIR%%/usr/lib/%%CT_NAME%%/gcc/%%CT_NAME%%/%%CT_GCC_VERSION%%/include-fixed"
+  cxx_builtin_include_directory: "%%CT_ROOT_DIR%%/usr/include/gcc-build-internal-%%CT_NAME%%/gcc/include-fixed"
+  cxx_builtin_include_directory: "%%CT_STAGING_DIR%%"
+  cxx_builtin_include_directory: "%%CT_STAGING_DIR%%/usr/lib"
+  cxx_builtin_include_directory: "%%CT_STAGING_DIR%%/usr/lib/gcc"
+  cxx_builtin_include_directory: "%%CT_STAGING_DIR%%/usr/lib/gcc/%%CT_NAME%%"
+  cxx_builtin_include_directory: "%%CT_STAGING_DIR%%/usr/lib/gcc/%%CT_NAME%%/%%CT_GCC_VERSION%%"
+  cxx_builtin_include_directory: "%%CT_STAGING_DIR%%/usr/lib/gcc/%%CT_NAME%%/%%CT_GCC_VERSION%%/include"
+  cxx_builtin_include_directory: "%%CT_STAGING_DIR%%/usr"
+  cxx_builtin_include_directory: "%%CT_STAGING_DIR%%/usr/include"
+  cxx_builtin_include_directory: "%%CT_STAGING_DIR%%/usr/include/c++"
+  cxx_builtin_include_directory: "%%CT_STAGING_DIR%%/usr/include/c++/%%CT_GCC_VERSION%%"
+  cxx_builtin_include_directory: "%%CT_STAGING_DIR%%/usr/include/c++/%%CT_GCC_VERSION%%/trl"
+  cxx_builtin_include_directory: "%%CT_STAGING_DIR%%/usr/include/c++/%%CT_GCC_VERSION%%/profile"
+
+  cxx_flag: "-std=c++11"
+  linker_flag: "-lstdc++"
+
+  unfiltered_cxx_flag: "-Wno-builtin-macro-redefined"
+  unfiltered_cxx_flag: "-D__DATE__=\"redacted\""
+  unfiltered_cxx_flag: "-D__TIMESTAMP__=\"redacted\""
+  unfiltered_cxx_flag: "-D__TIME__=\"redacted\""
+
+  compiler_flag: "-U_FORTIFY_SOURCE"
+  compiler_flag: "-D_FORTIFY_SOURCE=1"
+  compiler_flag: "-fstack-protector"
+  compiler_flag: "--sysroot=%%CT_STAGING_DIR%%"
+  compiler_flag: "-march=armv8-a"
+  compiler_flag: "-mtune=cortex-a57.cortex-a53"
+  compiler_flag: "-funsafe-math-optimizations"
+  compiler_flag: "-ftree-vectorize"
+  compiler_flag: "-fomit-frame-pointer"
+
+  linker_flag: "-Wl,-z,relro,-z,now"
+  linker_flag: "-no-canonical-prefixes"
+  linker_flag: "-pass-exit-codes"
+  linker_flag: "-Wl,--build-id=md5"
+  linker_flag: "-Wl,--hash-style=gnu"
+  linker_flag: "--sysroot=%%CT_STAGING_DIR%%"
+  linker_flag: "-Wl,--dynamic-linker=/lib/ld-linux-aarch64.so.1"
+
+  compilation_mode_flags {
+    mode: DBG
+    # Enable debug symbols.
+    compiler_flag: "-g"
+  }
+  compilation_mode_flags {
+    mode: OPT
+
+    # No debug symbols.
+    # Maybe we should enable https://gcc.gnu.org/wiki/DebugFission for opt or
+    # even generally? However, that can't happen here, as it requires special
+    # handling in Bazel.
+    compiler_flag: "-g0"
+
+    # Conservative choice for -O
+    # -O3 can increase binary size and even slow down the resulting binaries.
+    # Profile first and / or use FDO if you need better performance than this.
+    compiler_flag: "-O2"
+
+    # Disable assertions
+    compiler_flag: "-DNDEBUG"
+
+    # Removal of unused code and data at link time (can this increase binary size in some cases?).
+    compiler_flag: "-ffunction-sections"
+    compiler_flag: "-fdata-sections"
+    linker_flag: "-Wl,--gc-sections"
+  }
+  linking_mode_flags { mode: DYNAMIC }
+
+}
+
+toolchain {
+  abi_version: "local"
+  abi_libc_version: "local"
+  builtin_sysroot: ""
+  compiler: "compiler"
+  host_system_name: "local"
+  needsPic: true
+  supports_gold_linker: false
+  supports_incremental_linker: false
+  supports_fission: false
+  supports_interface_shared_objects: false
+  supports_normalizing_ar: false
+  supports_start_end_lib: false
+  target_libc: "local"
+  target_cpu: "local"
+  target_system_name: "local"
+  toolchain_identifier: "local_linux"
+
+  tool_path { name: "ar" path: "/usr/bin/ar" }
+  tool_path { name: "compat-ld" path: "/usr/bin/ld" }
+  tool_path { name: "cpp" path: "/usr/bin/cpp" }
+  tool_path { name: "dwp" path: "/usr/bin/dwp" }
+  tool_path { name: "gcc" path: "/usr/bin/gcc" }
+  cxx_flag: "-std=c++0x"
+  linker_flag: "-lstdc++"
+  linker_flag: "-B/usr/bin/"
+
+  # TODO(bazel-team): In theory, the path here ought to exactly match the path
+  # used by gcc. That works because bazel currently doesn't track files at
+  # absolute locations and has no remote execution, yet. However, this will need
+  # to be fixed, maybe with auto-detection?
+  cxx_builtin_include_directory: "/usr/lib/gcc/"
+  cxx_builtin_include_directory: "/usr/local/include"
+  cxx_builtin_include_directory: "/usr/include"
+
+  tool_path { name: "gcov" path: "/usr/bin/gcov" }
+
+  # C(++) compiles invoke the compiler (as that is the one knowing where
+  # to find libraries), but we provide LD so other rules can invoke the linker.
+  tool_path { name: "ld" path: "/usr/bin/ld" }
+
+  tool_path { name: "nm" path: "/usr/bin/nm" }
+  tool_path { name: "objcopy" path: "/usr/bin/objcopy" }
+  objcopy_embed_flag: "-I"
+  objcopy_embed_flag: "binary"
+  tool_path { name: "objdump" path: "/usr/bin/objdump" }
+  tool_path { name: "strip" path: "/usr/bin/strip" }
+
+  # Anticipated future default.
+  unfiltered_cxx_flag: "-no-canonical-prefixes"
+  unfiltered_cxx_flag: "-fno-canonical-system-headers"
+
+  # Make C++ compilation deterministic. Use linkstamping instead of these
+  # compiler symbols.
+  unfiltered_cxx_flag: "-Wno-builtin-macro-redefined"
+  unfiltered_cxx_flag: "-D__DATE__=\"redacted\""
+  unfiltered_cxx_flag: "-D__TIMESTAMP__=\"redacted\""
+  unfiltered_cxx_flag: "-D__TIME__=\"redacted\""
+
+  # Security hardening on by default.
+  # Conservative choice; -D_FORTIFY_SOURCE=2 may be unsafe in some cases.
+  # We need to undef it before redefining it as some distributions now have
+  # it enabled by default.
+  compiler_flag: "-U_FORTIFY_SOURCE"
+  compiler_flag: "-D_FORTIFY_SOURCE=1"
+  compiler_flag: "-fstack-protector"
+  linker_flag: "-Wl,-z,relro,-z,now"
+
+  # Include native pyconfig.h
+  compiler_flag: "-D_PYTHON_INCLUDE_NATIVE"
+
+  # Enable coloring even if there's no attached terminal. Bazel removes the
+  # escape sequences if --nocolor is specified. This isn't supported by gcc
+  # on Ubuntu 14.04.
+  # compiler_flag: "-fcolor-diagnostics"
+
+  # All warnings are enabled. Maybe enable -Werror as well?
+  compiler_flag: "-Wall"
+  # Enable a few more warnings that aren't part of -Wall.
+  compiler_flag: "-Wunused-but-set-parameter"
+  # But disable some that are problematic.
+  compiler_flag: "-Wno-free-nonheap-object" # has false positives
+
+  # Keep stack frames for debugging, even in opt mode.
+  compiler_flag: "-fno-omit-frame-pointer"
+
+  # Anticipated future default.
+  linker_flag: "-no-canonical-prefixes"
+  # Have gcc return the exit code from ld.
+  linker_flag: "-pass-exit-codes"
+  # Stamp the binary with a unique identifier.
+  linker_flag: "-Wl,--build-id=md5"
+  linker_flag: "-Wl,--hash-style=gnu"
+  # Gold linker only? Can we enable this by default?
+  # linker_flag: "-Wl,--warn-execstack"
+  # linker_flag: "-Wl,--detect-odr-violations"
+
+  compilation_mode_flags {
+    mode: DBG
+    # Enable debug symbols.
+    compiler_flag: "-g"
+  }
+  compilation_mode_flags {
+    mode: OPT
+
+    # No debug symbols.
+    # Maybe we should enable https://gcc.gnu.org/wiki/DebugFission for opt or
+    # even generally? However, that can't happen here, as it requires special
+    # handling in Bazel.
+    compiler_flag: "-g0"
+
+    # Conservative choice for -O
+    # -O3 can increase binary size and even slow down the resulting binaries.
+    # Profile first and / or use FDO if you need better performance than this.
+    compiler_flag: "-O2"
+
+    # Disable assertions
+    compiler_flag: "-DNDEBUG"
+
+    # Removal of unused code and data at link time (can this increase binary size in some cases?).
+    compiler_flag: "-ffunction-sections"
+    compiler_flag: "-fdata-sections"
+    linker_flag: "-Wl,--gc-sections"
+  }
+  linking_mode_flags { mode: DYNAMIC }
+}
-- 
2.7.4

